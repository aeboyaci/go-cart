// Code generated by mockery v2.36.0. DO NOT EDIT.

package tests

import (
	models "go-cart/pkg/models"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// mockRepositoryImpl is an autogenerated mock type for the Repository type
type mockRepositoryImpl struct {
	mock.Mock
}

// FindByEmail provides a mock function with given fields: tx, email
func (_m *mockRepositoryImpl) FindByEmail(tx *gorm.DB, email string) (models.User, error) {
	ret := _m.Called(tx, email)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.User, error)); ok {
		return rf(tx, email)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.User); ok {
		r0 = rf(tx, email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tx, user
func (_m *mockRepositoryImpl) Save(tx *gorm.DB, user models.User) error {
	ret := _m.Called(tx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, models.User) error); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockRepositoryImpl creates a new instance of mockRepositoryImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRepositoryImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRepositoryImpl {
	mock := &mockRepositoryImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
